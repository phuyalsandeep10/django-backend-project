services:
  db:
    image: postgres:16-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatboq_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    networks:
      - mynetwork

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mynetwork
    command: redis-server --appendonly yes

  # backend:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   container_name: chatboq_backend
  #   # command: [ "sh", "./start.sh" ]
  #   ports:
  #     - "8000:8000"
  #   env_file:
  #     - .env
  #   environment:
  #     - REDIS_URL=redis://redis:6379
  #     - DATABASE_URL=postgresql://postgres:postgres@db:5432/chatboq_db
  #     - ASYNC_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/chatboq_db
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #   depends_on:
  #     - db
  #     - redis
  #     # - kafka
  #   networks:
  #     - mynetwork

  celery_worker:
    build: .
    command: celery -A src.config.celery worker --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/chatboq_db
      - ASYNC_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/chatboq_db
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - redis
      - db
    networks:
      - mynetwork

  celery_beat:
    build: .
    command: celery -A src.config.celery beat --loglevel=info
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/chatboq_db
      - ASYNC_DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/chatboq_db
    depends_on:
      - redis
      - db
    networks:
      - mynetwork
  # flower:
  #   image: mher/flower:latest
  #   command: [ "celery", "flower", "--broker=redis://redis:6379", "--port=5555" ]
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     - redis
  #   networks:
  #     - mynetwork
  # kafka:
  #   image: confluentinc/cp-kafka:7.5.0
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #     - "29092:29092"
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #   volumes:
  #     - kafka_data:/var/lib/kafka/data
  #   healthcheck:
  #     test: [ "CMD-SHELL", "kafka-consumer-groups --bootstrap-server kafka:9092 --describe" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - mynetwork

  # zookeeper:
  #   image: confluentinc/cp-zookeeper:7.5.0
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   networks:
  #     - mynetwork

  # kafka-ui:
  #   image: provectuslabs/kafka-ui:latest
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - KAFKA_CLUSTERS_0_NAME=local
  #     - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092

  #   depends_on:
  #     - kafka
  #   healthcheck:
  #     test: [ "CMD-SHELL", "curl --fail http://localhost:8080/actuator/health" ]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - mynetwork

volumes:
  postgres_data:
  redis_data:
    # kafka_data:


networks:
  mynetwork:
    driver: bridge
