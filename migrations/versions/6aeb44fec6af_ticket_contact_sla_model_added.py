"""ticket contact sla model added

Revision ID: 6aeb44fec6af
Revises: d1a4b37f9381
Create Date: 2025-07-13 14:00:12.067921

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel.sql.sqltypes
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "6aeb44fec6af"
down_revision: Union[str, Sequence[str], None] = "d1a4b37f9381"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "contacts",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("first_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("last_name", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("phone", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_table(
        "sla",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
        sa.Column("response_time", sa.Integer(), nullable=False),
        sa.Column("resolution_time", sa.Integer(), nullable=False),
        sa.Column("issued_by", sa.Integer(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tickets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("description", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column(
            "priority",
            sa.Enum(
                "CRITICAL", "HIGH", "MEDIUM", "LOW", "TRIVIAL", name="priorityenum"
            ),
            nullable=False,
        ),
        sa.Column(
            "status",
            sa.Enum("OPEN", "PENDING", "CLOSED", name="statusenum"),
            nullable=False,
        ),
        sa.Column("issued_by", sa.Integer(), nullable=False),
        sa.Column("sla_id", sa.Integer(), nullable=True),
        sa.Column("contact_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["contact_id"], ["contacts.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["sla_id"], ["sla.id"], ondelete="SET NULL"),
        sa.PrimaryKeyConstraint("id"),
    )
    # with op.batch_alter_table('org_teams', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_org_teams_organization_id'))
    #
    # op.drop_table('org_teams')
    # op.drop_table('org_conversation_members')
    # with op.batch_alter_table('sys_organization_invitations', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_invitations_invited_by_id'))
    #
    # op.drop_table('sys_organization_invitations')
    # with op.batch_alter_table('sys_organization_members', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_members_organization_id'))
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_members_user_id'))
    #
    # op.drop_table('sys_organization_members')
    # op.drop_table('org_conversations')
    # with op.batch_alter_table('sys_organizations', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_sys_organizations_name'))
    #     batch_op.drop_index(batch_op.f('ix_sys_organizations_slug'))
    #
    # op.drop_table('sys_organizations')
    # op.drop_table('org_message_attachments')
    # with op.batch_alter_table('sys_organization_roles', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_roles_organization_id'))
    #
    # op.drop_table('sys_organization_roles')
    # with op.batch_alter_table('org_team_members', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_org_team_members_team_id'))
    #     batch_op.drop_index(batch_op.f('ix_org_team_members_user_id'))
    #
    # op.drop_table('org_team_members')
    # op.drop_table('org_messages')
    # with op.batch_alter_table('sys_organization_member_roles', schema=None) as batch_op:
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_member_roles_member_id'))
    #     batch_op.drop_index(batch_op.f('ix_sys_organization_member_roles_role_id'))
    #
    # op.drop_table('sys_organization_member_roles')
    # op.drop_table('org_customers')
    # with op.batch_alter_table('email_verifications', schema=None) as batch_op:
    #     batch_op.alter_column('expires_at',
    #            existing_type=postgresql.TIMESTAMP(),
    #            type_=sqlmodel.sql.sqltypes.AutoString(),
    #            nullable=True)
    #
    # with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
    #     batch_op.alter_column('expires_at',
    #            existing_type=postgresql.TIMESTAMP(),
    #            type_=sqlmodel.sql.sqltypes.AutoString(),
    #            nullable=True)
    #     batch_op.create_index(batch_op.f('ix_refresh_tokens_token'), ['token'], unique=True)
    #
    # with op.batch_alter_table('sys_permissions', schema=None) as batch_op:
    #     batch_op.alter_column('name',
    #            existing_type=sa.VARCHAR(length=250),
    #            type_=sqlmodel.sql.sqltypes.AutoString(length=255),
    #            existing_nullable=False)
    #     batch_op.alter_column('identifier',
    #            existing_type=sa.VARCHAR(length=250),
    #            type_=sqlmodel.sql.sqltypes.AutoString(length=255),
    #            existing_nullable=False)
    #     batch_op.alter_column('description',
    #            existing_type=sa.VARCHAR(length=250),
    #            type_=sqlmodel.sql.sqltypes.AutoString(length=500),
    #            existing_nullable=True)
    #     batch_op.drop_constraint(batch_op.f('sys_permissions_identifier_key'), type_='unique')
    #     batch_op.drop_constraint(batch_op.f('sys_permissions_name_key'), type_='unique')
    #     batch_op.create_index(batch_op.f('ix_sys_permissions_identifier'), ['identifier'], unique=True)
    #     batch_op.create_index(batch_op.f('ix_sys_permissions_name'), ['name'], unique=False)
    #
    # with op.batch_alter_table('sys_users', schema=None) as batch_op:
    #     batch_op.alter_column('name',
    #            existing_type=sa.VARCHAR(),
    #            nullable=True)
    #     batch_op.drop_constraint(batch_op.f('sys_users_email_key'), type_='unique')
    #     batch_op.create_index(batch_op.f('ix_sys_users_email'), ['email'], unique=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("sys_users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_sys_users_email"))
        batch_op.create_unique_constraint(
            batch_op.f("sys_users_email_key"),
            ["email"],
            postgresql_nulls_not_distinct=False,
        )
        batch_op.alter_column("name", existing_type=sa.VARCHAR(), nullable=False)

    with op.batch_alter_table("sys_permissions", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_sys_permissions_name"))
        batch_op.drop_index(batch_op.f("ix_sys_permissions_identifier"))
        batch_op.create_unique_constraint(
            batch_op.f("sys_permissions_name_key"),
            ["name"],
            postgresql_nulls_not_distinct=False,
        )
        batch_op.create_unique_constraint(
            batch_op.f("sys_permissions_identifier_key"),
            ["identifier"],
            postgresql_nulls_not_distinct=False,
        )
        batch_op.alter_column(
            "description",
            existing_type=sqlmodel.sql.sqltypes.AutoString(length=500),
            type_=sa.VARCHAR(length=250),
            existing_nullable=True,
        )
        batch_op.alter_column(
            "identifier",
            existing_type=sqlmodel.sql.sqltypes.AutoString(length=255),
            type_=sa.VARCHAR(length=250),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "name",
            existing_type=sqlmodel.sql.sqltypes.AutoString(length=255),
            type_=sa.VARCHAR(length=250),
            existing_nullable=False,
        )

    with op.batch_alter_table("refresh_tokens", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_refresh_tokens_token"))
        batch_op.alter_column(
            "expires_at",
            existing_type=sqlmodel.sql.sqltypes.AutoString(),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
        )

    with op.batch_alter_table("email_verifications", schema=None) as batch_op:
        batch_op.alter_column(
            "expires_at",
            existing_type=sqlmodel.sql.sqltypes.AutoString(),
            type_=postgresql.TIMESTAMP(),
            nullable=False,
        )

    op.create_table(
        "org_customers",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('org_customers_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("phone", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column("email", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "ip_address", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "latitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "longitude",
            sa.DOUBLE_PRECISION(precision=53),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("city", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "country", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["sys_users.id"], name="org_customers_created_by_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name="org_customers_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["sys_users.id"], name="org_customers_updated_by_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="org_customers_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "sys_organization_member_roles",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("member_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_member_roles_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["member_id"],
            ["sys_organization_members.id"],
            name=op.f("sys_organization_member_roles_member_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["sys_organization_roles.id"],
            name=op.f("sys_organization_member_roles_role_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_member_roles_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("sys_organization_member_roles_pkey")),
    )
    with op.batch_alter_table("sys_organization_member_roles", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_sys_organization_member_roles_role_id"),
            ["role_id"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_sys_organization_member_roles_member_id"),
            ["member_id"],
            unique=False,
        )

    op.create_table(
        "org_messages",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('org_messages_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "content", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column("customer_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "feedback", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["org_conversations.id"],
            name="org_messages_conversation_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["sys_users.id"], name="org_messages_created_by_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["customer_id"], ["org_customers.id"], name="org_messages_customer_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["sys_users.id"], name="org_messages_updated_by_id_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["sys_users.id"], name="org_messages_user_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="org_messages_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "org_team_members",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("team_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("org_team_members_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["team_id"], ["org_teams.id"], name=op.f("org_team_members_team_id_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("org_team_members_updated_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["sys_users.id"], name=op.f("org_team_members_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("org_team_members_pkey")),
    )
    with op.batch_alter_table("org_team_members", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_org_team_members_user_id"), ["user_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_org_team_members_team_id"), ["team_id"], unique=False
        )

    op.create_table(
        "sys_organization_roles",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column(
            "identifier", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "permissions",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_roles_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name=op.f("sys_organization_roles_organization_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_roles_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("sys_organization_roles_pkey")),
    )
    with op.batch_alter_table("sys_organization_roles", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_sys_organization_roles_organization_id"),
            ["organization_id"],
            unique=False,
        )

    op.create_table(
        "org_message_attachments",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("message_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "file_name", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.Column(
            "file_type", sa.VARCHAR(length=255), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("org_message_attachments_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["message_id"],
            ["org_messages.id"],
            name=op.f("org_message_attachments_message_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("org_message_attachments_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("org_message_attachments_pkey")),
    )
    op.create_table(
        "sys_organizations",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('sys_organizations_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("slug", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column("logo", sa.VARCHAR(length=255), autoincrement=False, nullable=True),
        sa.Column(
            "website", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name="sys_organizations_created_by_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name="sys_organizations_updated_by_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="sys_organizations_pkey"),
        postgresql_ignore_search_path=False,
    )
    with op.batch_alter_table("sys_organizations", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_sys_organizations_slug"), ["slug"], unique=True
        )
        batch_op.create_index(
            batch_op.f("ix_sys_organizations_name"), ["name"], unique=True
        )

    op.create_table(
        "org_conversations",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('org_conversations_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=255), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("customer_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "ip_address", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.Column(
            "feeback", sa.VARCHAR(length=255), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name="org_conversations_created_by_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["customer_id"],
            ["org_customers.id"],
            name="org_conversations_customer_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name="org_conversations_organization_id_fkey",
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name="org_conversations_updated_by_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="org_conversations_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "sys_organization_members",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("is_owner", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_members_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name=op.f("sys_organization_members_organization_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_members_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("sys_organization_members_pkey")),
    )
    with op.batch_alter_table("sys_organization_members", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_sys_organization_members_user_id"), ["user_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_sys_organization_members_organization_id"),
            ["organization_id"],
            unique=False,
        )

    op.create_table(
        "sys_organization_invitations",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("email", sa.VARCHAR(length=250), autoincrement=False, nullable=True),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("status", sa.VARCHAR(length=100), autoincrement=False, nullable=True),
        sa.Column("invited_by_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "role_ids",
            postgresql.JSON(astext_type=sa.Text()),
            autoincrement=False,
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_invitations_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["invited_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_invitations_invited_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name=op.f("sys_organization_invitations_organization_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("sys_organization_invitations_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("sys_organization_invitations_pkey")),
    )
    with op.batch_alter_table("sys_organization_invitations", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_sys_organization_invitations_invited_by_id"),
            ["invited_by_id"],
            unique=False,
        )

    op.create_table(
        "org_conversation_members",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("conversation_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["conversation_id"],
            ["org_conversations.id"],
            name=op.f("org_conversation_members_conversation_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("org_conversation_members_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("org_conversation_members_updated_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["sys_users.id"],
            name=op.f("org_conversation_members_user_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("org_conversation_members_pkey")),
    )
    op.create_table(
        "org_teams",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("active", sa.BOOLEAN(), autoincrement=False, nullable=False),
        sa.Column("created_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("updated_by_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=250), autoincrement=False, nullable=False),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column(
            "description", sa.VARCHAR(length=250), autoincrement=False, nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["created_by_id"],
            ["sys_users.id"],
            name=op.f("org_teams_created_by_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["sys_organizations.id"],
            name=op.f("org_teams_organization_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"],
            ["sys_users.id"],
            name=op.f("org_teams_updated_by_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("org_teams_pkey")),
    )
    with op.batch_alter_table("org_teams", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_org_teams_organization_id"),
            ["organization_id"],
            unique=False,
        )

    op.drop_table("tickets")
    op.drop_table("sla")
    op.drop_table("contacts")
    # ### end Alembic commands ###
